# -*- coding: utf-8 -*-
"""DSA_codegnan_1/7/25.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W_8uCsQHozD3R66bza5VOcKXYHkqo0sI
"""

# 1. list
# 2. string
# 3. stacks
# 4. queues
# 5. linked list
# 6. hashing/ hashtables
# 7. sets
# 8. trees
# 9. graphs
# non-linear
# 10. heaps/priority queue
# 11. trie- prefix
# 12. recursion/ backtracking
# 13. searching
# 14. sorting
# 15. greedy/brute force

#Array operations
#program to consider a list arr=[10,20,30,40] and perform insert operaion and deletion operation with 50 and 25 at position 2 respectively, delete 30
# and traverse the array to fetch a number 25 is present are not
arr=[10, 20, 30, 40]
#insertoperation
arr.append(50)
arr.insert(2, 25)
for i in arr:
  print(i, end=" ")
arr.remove(30)
arr.pop()
#printing list
print()
for i in arr:
  print(i, end=" ")
print("\n25 in arr?", 25 in arr)

''' program to check whether the given string palindrome or not
and count the palindromic characters which are repeated
str=madam
output= {'m':2 'a':2 'd':1}
str=malayalam'''
# name="pavan"
text="malayalam"
# print(name[0::])
# text=input("Enter the name: ")
if text==text[::-1]:
  print("Palindrome")
else:
  print("Not Palindrome")
freq={}
for ch in text:
  freq[ch]=freq.get(ch,0)+1
  print(freq)
print(freq)

'''searching
linear
Binary
sentinel
fibonacci
interpolaion
'''

'''LINEAR searching
1. arr of list of size n
2. create a key for the search element
3. start with zero index
4. compare arr[i]==key
    arr[i]=key return index
    else not (move to next index)
5. repeat the same steps till n-1
6. if no match return -1
'''
def linear_search(arr, key):
  for i in range(len(arr)):
    print(i)
    if arr[i]==key:
      return i
  return -1
size=int(input("Enter the size of array:"))
arr=[]
for i in range(size):
  num=int(input(f"element{i+1} "))
  arr.append(num)
print(arr)
key=int(input("Enter the element to be searched"))
result =linear_search(arr, key)
if result!=-1:
  print(f"\nElement {key} found at {result}")
else:
  print(f"\nElement {key} not found.")

'''
set low & high 0->n-1
condition low <= high
mid= low+high//2
arr[mid]==key return mid
arr[mid]<keylow mid+1
arr[mid]>keyhigh mid-1
not found return -1
'''

# BINARY SEARCH
def binary_search(arr, key):
  low=0
  high=len(arr)-1
  while low<=high:
    mid=(low+high)//2
    if arr[mid]==key:
      return mid
    elif arr[mid]<key:
      low=mid+1
    elif arr[mid]>key:
      high=mid-1
  return -1

size=int(input("Enter the size of array:"))
arr=[]
for i in range(size):
  num=int(input(f"element{i+1} "))
  arr.append(num)
print(arr)
key=int(input("Enter the element to be searched"))
result =binary_search(arr, key)
if result!=-1:
  print(f"\nElement {key} found at {result}")
else:
  print(f"\nElement {key} not found.")

23